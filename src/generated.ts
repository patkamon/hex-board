// Generated by @wagmi/cli@1.3.0 on 8/12/2023 at 12:47:30 PM
import {
  useNetwork,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  Address,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AttestationStation
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * -
 */
export const attestationStationABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'about',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'key', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'AttestationCreated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_attestations',
        internalType: 'struct AttestationStation.AttestationData[]',
        type: 'tuple[]',
        components: [
          { name: 'about', internalType: 'address', type: 'address' },
          { name: 'key', internalType: 'bytes32', type: 'bytes32' },
          { name: 'val', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'attest',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_about', internalType: 'address', type: 'address' },
      { name: '_key', internalType: 'bytes32', type: 'bytes32' },
      { name: '_val', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'attest',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'attestations',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

/**
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * -
 */
export const attestationStationAddress = {
  10: '0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77',
  420: '0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77',
  31337: '0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77',
} as const

/**
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * -
 */
export const attestationStationConfig = {
  address: attestationStationAddress,
  abi: attestationStationABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Counter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const counterABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'increment',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'number',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'setNumber',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ILayerZeroEndpoint
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iLayerZeroEndpointABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_dstChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_userApplication', internalType: 'address', type: 'address' },
      { name: '_payload', internalType: 'bytes', type: 'bytes' },
      { name: '_payInZRO', internalType: 'bool', type: 'bool' },
      { name: '_adapterParam', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'estimateFees',
    outputs: [
      { name: 'nativeFee', internalType: 'uint256', type: 'uint256' },
      { name: 'zroFee', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_srcAddress', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'forceResumeReceive',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getChainId',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_version', internalType: 'uint16', type: 'uint16' },
      { name: '_chainId', internalType: 'uint16', type: 'uint16' },
      { name: '_userApplication', internalType: 'address', type: 'address' },
      { name: '_configType', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getConfig',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_srcAddress', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'getInboundNonce',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_dstChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_srcAddress', internalType: 'address', type: 'address' },
    ],
    name: 'getOutboundNonce',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_userApplication', internalType: 'address', type: 'address' },
    ],
    name: 'getReceiveLibraryAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_userApplication', internalType: 'address', type: 'address' },
    ],
    name: 'getReceiveVersion',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_userApplication', internalType: 'address', type: 'address' },
    ],
    name: 'getSendLibraryAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_userApplication', internalType: 'address', type: 'address' },
    ],
    name: 'getSendVersion',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_srcAddress', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'hasStoredPayload',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isReceivingPayload',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isSendingPayload',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_srcAddress', internalType: 'bytes', type: 'bytes' },
      { name: '_dstAddress', internalType: 'address', type: 'address' },
      { name: '_nonce', internalType: 'uint64', type: 'uint64' },
      { name: '_gasLimit', internalType: 'uint256', type: 'uint256' },
      { name: '_payload', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'receivePayload',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_srcAddress', internalType: 'bytes', type: 'bytes' },
      { name: '_payload', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'retryPayload',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_dstChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_destination', internalType: 'bytes', type: 'bytes' },
      { name: '_payload', internalType: 'bytes', type: 'bytes' },
      {
        name: '_refundAddress',
        internalType: 'address payable',
        type: 'address',
      },
      { name: '_zroPaymentAddress', internalType: 'address', type: 'address' },
      { name: '_adapterParams', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'send',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_version', internalType: 'uint16', type: 'uint16' },
      { name: '_chainId', internalType: 'uint16', type: 'uint16' },
      { name: '_configType', internalType: 'uint256', type: 'uint256' },
      { name: '_config', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'setConfig',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_version', internalType: 'uint16', type: 'uint16' }],
    name: 'setReceiveVersion',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_version', internalType: 'uint16', type: 'uint16' }],
    name: 'setSendVersion',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ILayerZeroReceiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iLayerZeroReceiverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_srcAddress', internalType: 'bytes', type: 'bytes' },
      { name: '_nonce', internalType: 'uint64', type: 'uint64' },
      { name: '_payload', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'lzReceive',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ILayerZeroUserApplicationConfig
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iLayerZeroUserApplicationConfigABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_srcAddress', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'forceResumeReceive',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_version', internalType: 'uint16', type: 'uint16' },
      { name: '_chainId', internalType: 'uint16', type: 'uint16' },
      { name: '_configType', internalType: 'uint256', type: 'uint256' },
      { name: '_config', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'setConfig',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_version', internalType: 'uint16', type: 'uint16' }],
    name: 'setReceiveVersion',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_version', internalType: 'uint16', type: 'uint16' }],
    name: 'setSendVersion',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NonblockingLzApp
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const nonblockingLzAppABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_srcChainId',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      {
        name: '_srcAddress',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: '_nonce',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: '_payload',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      { name: '_reason', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'MessageFailed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_srcChainId',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      {
        name: '_srcAddress',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: '_nonce',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: '_payloadHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'RetryMessageSuccess',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_dstChainId',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      { name: '_type', internalType: 'uint16', type: 'uint16', indexed: false },
      {
        name: '_minDstGas',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMinDstGas',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'precrime',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetPrecrime',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_remoteChainId',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      { name: '_path', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'SetTrustedRemote',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_remoteChainId',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      {
        name: '_remoteAddress',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'SetTrustedRemoteAddress',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_PAYLOAD_SIZE_LIMIT',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint16', type: 'uint16' },
      { name: '', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'failedMessages',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_srcAddress', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'forceResumeReceive',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_version', internalType: 'uint16', type: 'uint16' },
      { name: '_chainId', internalType: 'uint16', type: 'uint16' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '_configType', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getConfig',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_remoteChainId', internalType: 'uint16', type: 'uint16' },
    ],
    name: 'getTrustedRemoteAddress',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_srcAddress', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isTrustedRemote',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lzEndpoint',
    outputs: [
      {
        name: '',
        internalType: 'contract ILayerZeroEndpoint',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_srcAddress', internalType: 'bytes', type: 'bytes' },
      { name: '_nonce', internalType: 'uint64', type: 'uint64' },
      { name: '_payload', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'lzReceive',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint16', type: 'uint16' },
      { name: '', internalType: 'uint16', type: 'uint16' },
    ],
    name: 'minDstGasLookup',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_srcAddress', internalType: 'bytes', type: 'bytes' },
      { name: '_nonce', internalType: 'uint64', type: 'uint64' },
      { name: '_payload', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'nonblockingLzReceive',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
    name: 'payloadSizeLimitLookup',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'precrime',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_srcAddress', internalType: 'bytes', type: 'bytes' },
      { name: '_nonce', internalType: 'uint64', type: 'uint64' },
      { name: '_payload', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'retryMessage',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_version', internalType: 'uint16', type: 'uint16' },
      { name: '_chainId', internalType: 'uint16', type: 'uint16' },
      { name: '_configType', internalType: 'uint256', type: 'uint256' },
      { name: '_config', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'setConfig',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dstChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_packetType', internalType: 'uint16', type: 'uint16' },
      { name: '_minGas', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinDstGas',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dstChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_size', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setPayloadSizeLimit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_precrime', internalType: 'address', type: 'address' }],
    name: 'setPrecrime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_version', internalType: 'uint16', type: 'uint16' }],
    name: 'setReceiveVersion',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_version', internalType: 'uint16', type: 'uint16' }],
    name: 'setSendVersion',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_remoteChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_path', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'setTrustedRemote',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_remoteChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_remoteAddress', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'setTrustedRemoteAddress',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
    name: 'trustedRemoteLookup',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LzApp
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const lzAppABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_dstChainId',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      { name: '_type', internalType: 'uint16', type: 'uint16', indexed: false },
      {
        name: '_minDstGas',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMinDstGas',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'precrime',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetPrecrime',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_remoteChainId',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      { name: '_path', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'SetTrustedRemote',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_remoteChainId',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      {
        name: '_remoteAddress',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'SetTrustedRemoteAddress',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_PAYLOAD_SIZE_LIMIT',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_srcAddress', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'forceResumeReceive',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_version', internalType: 'uint16', type: 'uint16' },
      { name: '_chainId', internalType: 'uint16', type: 'uint16' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '_configType', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getConfig',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_remoteChainId', internalType: 'uint16', type: 'uint16' },
    ],
    name: 'getTrustedRemoteAddress',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_srcAddress', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isTrustedRemote',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lzEndpoint',
    outputs: [
      {
        name: '',
        internalType: 'contract ILayerZeroEndpoint',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_srcAddress', internalType: 'bytes', type: 'bytes' },
      { name: '_nonce', internalType: 'uint64', type: 'uint64' },
      { name: '_payload', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'lzReceive',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint16', type: 'uint16' },
      { name: '', internalType: 'uint16', type: 'uint16' },
    ],
    name: 'minDstGasLookup',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
    name: 'payloadSizeLimitLookup',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'precrime',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_version', internalType: 'uint16', type: 'uint16' },
      { name: '_chainId', internalType: 'uint16', type: 'uint16' },
      { name: '_configType', internalType: 'uint256', type: 'uint256' },
      { name: '_config', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'setConfig',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dstChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_packetType', internalType: 'uint16', type: 'uint16' },
      { name: '_minGas', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinDstGas',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dstChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_size', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setPayloadSizeLimit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_precrime', internalType: 'address', type: 'address' }],
    name: 'setPrecrime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_version', internalType: 'uint16', type: 'uint16' }],
    name: 'setReceiveVersion',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_version', internalType: 'uint16', type: 'uint16' }],
    name: 'setSendVersion',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_remoteChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_path', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'setTrustedRemote',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_remoteChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_remoteAddress', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'setTrustedRemoteAddress',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
    name: 'trustedRemoteLookup',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OmniMessage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const omniMessageABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'a', internalType: 'address', type: 'address' },
      { name: 'destchain', internalType: 'uint16', type: 'uint16' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_srcChainId',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      {
        name: '_srcAddress',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: '_nonce',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: '_payload',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      { name: '_reason', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'MessageFailed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_srcChainId',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      {
        name: '_srcAddress',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: '_nonce',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: '_payloadHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'RetryMessageSuccess',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_dstChainId',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      { name: '_type', internalType: 'uint16', type: 'uint16', indexed: false },
      {
        name: '_minDstGas',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMinDstGas',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'precrime',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetPrecrime',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_remoteChainId',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      { name: '_path', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'SetTrustedRemote',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_remoteChainId',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      {
        name: '_remoteAddress',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'SetTrustedRemoteAddress',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_PAYLOAD_SIZE_LIMIT',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'data',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'dstChainId', internalType: 'uint16', type: 'uint16' },
      { name: 'adapterParams', internalType: 'bytes', type: 'bytes' },
      { name: '_message', internalType: 'string', type: 'string' },
    ],
    name: 'estimateFees',
    outputs: [
      { name: 'nativeFee', internalType: 'uint256', type: 'uint256' },
      { name: 'zroFee', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint16', type: 'uint16' },
      { name: '', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'failedMessages',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_srcAddress', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'forceResumeReceive',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_version', internalType: 'uint16', type: 'uint16' },
      { name: '_chainId', internalType: 'uint16', type: 'uint16' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '_configType', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getConfig',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_remoteChainId', internalType: 'uint16', type: 'uint16' },
    ],
    name: 'getTrustedRemoteAddress',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_srcAddress', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isTrustedRemote',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lzEndpoint',
    outputs: [
      {
        name: '',
        internalType: 'contract ILayerZeroEndpoint',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_srcAddress', internalType: 'bytes', type: 'bytes' },
      { name: '_nonce', internalType: 'uint64', type: 'uint64' },
      { name: '_payload', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'lzReceive',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint16', type: 'uint16' },
      { name: '', internalType: 'uint16', type: 'uint16' },
    ],
    name: 'minDstGasLookup',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_srcAddress', internalType: 'bytes', type: 'bytes' },
      { name: '_nonce', internalType: 'uint64', type: 'uint64' },
      { name: '_payload', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'nonblockingLzReceive',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
    name: 'payloadSizeLimitLookup',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'poolFee',
    outputs: [{ name: '', internalType: 'uint24', type: 'uint24' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pp',
    outputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'precrime',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_srcAddress', internalType: 'bytes', type: 'bytes' },
      { name: '_nonce', internalType: 'uint64', type: 'uint64' },
      { name: '_payload', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'retryMessage',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'role',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'send',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_version', internalType: 'uint16', type: 'uint16' },
      { name: '_chainId', internalType: 'uint16', type: 'uint16' },
      { name: '_configType', internalType: 'uint256', type: 'uint256' },
      { name: '_config', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'setConfig',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dstChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_packetType', internalType: 'uint16', type: 'uint16' },
      { name: '_minGas', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinDstGas',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dstChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_size', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setPayloadSizeLimit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_precrime', internalType: 'address', type: 'address' }],
    name: 'setPrecrime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_version', internalType: 'uint16', type: 'uint16' }],
    name: 'setReceiveVersion',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_version', internalType: 'uint16', type: 'uint16' }],
    name: 'setSendVersion',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_remoteChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_path', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'setTrustedRemote',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_remoteChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_remoteAddress', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'setTrustedRemoteAddress',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_otherContract', internalType: 'address', type: 'address' },
    ],
    name: 'trustAddress',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
    name: 'trustedRemoteLookup',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Semver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const semverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_major', internalType: 'uint256', type: 'uint256' },
      { name: '_minor', internalType: 'uint256', type: 'uint256' },
      { name: '_patch', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationStationABI}__.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * -
 */
export function useAttestationStationRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof attestationStationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof attestationStationABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address'
  > & { chainId?: keyof typeof attestationStationAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: attestationStationABI,
    address:
      attestationStationAddress[
        chainId as keyof typeof attestationStationAddress
      ],
    ...config,
  } as UseContractReadConfig<
    typeof attestationStationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationStationABI}__ and `functionName` set to `"attestations"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * -
 */
export function useAttestationStationAttestations<
  TFunctionName extends 'attestations',
  TSelectData = ReadContractResult<typeof attestationStationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof attestationStationABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof attestationStationAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: attestationStationABI,
    address:
      attestationStationAddress[
        chainId as keyof typeof attestationStationAddress
      ],
    functionName: 'attestations',
    ...config,
  } as UseContractReadConfig<
    typeof attestationStationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationStationABI}__ and `functionName` set to `"version"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * -
 */
export function useAttestationStationVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<typeof attestationStationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof attestationStationABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof attestationStationAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: attestationStationABI,
    address:
      attestationStationAddress[
        chainId as keyof typeof attestationStationAddress
      ],
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<
    typeof attestationStationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link attestationStationABI}__.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * -
 */
export function useAttestationStationWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof attestationStationAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof attestationStationABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof attestationStationABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof attestationStationABI, TFunctionName, TMode>({
    abi: attestationStationABI,
    address:
      attestationStationAddress[
        chainId as keyof typeof attestationStationAddress
      ],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link attestationStationABI}__ and `functionName` set to `"attest"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * -
 */
export function useAttestationStationAttest<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof attestationStationAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof attestationStationABI,
          'attest'
        >['request']['abi'],
        'attest',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'attest' }
    : UseContractWriteConfig<typeof attestationStationABI, 'attest', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'attest'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof attestationStationABI, 'attest', TMode>({
    abi: attestationStationABI,
    address:
      attestationStationAddress[
        chainId as keyof typeof attestationStationAddress
      ],
    functionName: 'attest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link attestationStationABI}__.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * -
 */
export function usePrepareAttestationStationWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof attestationStationABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof attestationStationAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: attestationStationABI,
    address:
      attestationStationAddress[
        chainId as keyof typeof attestationStationAddress
      ],
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof attestationStationABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link attestationStationABI}__ and `functionName` set to `"attest"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * -
 */
export function usePrepareAttestationStationAttest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof attestationStationABI, 'attest'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof attestationStationAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: attestationStationABI,
    address:
      attestationStationAddress[
        chainId as keyof typeof attestationStationAddress
      ],
    functionName: 'attest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof attestationStationABI, 'attest'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link attestationStationABI}__.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * -
 */
export function useAttestationStationEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof attestationStationABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof attestationStationAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: attestationStationABI,
    address:
      attestationStationAddress[
        chainId as keyof typeof attestationStationAddress
      ],
    ...config,
  } as UseContractEventConfig<typeof attestationStationABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link attestationStationABI}__ and `eventName` set to `"AttestationCreated"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77)
 * -
 */
export function useAttestationStationAttestationCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof attestationStationABI, 'AttestationCreated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof attestationStationAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: attestationStationABI,
    address:
      attestationStationAddress[
        chainId as keyof typeof attestationStationAddress
      ],
    eventName: 'AttestationCreated',
    ...config,
  } as UseContractEventConfig<
    typeof attestationStationABI,
    'AttestationCreated'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof counterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: counterABI,
    ...config,
  } as UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"number"`.
 */
export function useCounterNumber<
  TFunctionName extends 'number',
  TSelectData = ReadContractResult<typeof counterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: counterABI,
    functionName: 'number',
    ...config,
  } as UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof counterABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof counterABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof counterABI, TFunctionName, TMode>({
    abi: counterABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"increment"`.
 */
export function useCounterIncrement<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof counterABI,
          'increment'
        >['request']['abi'],
        'increment',
        TMode
      > & { functionName?: 'increment' }
    : UseContractWriteConfig<typeof counterABI, 'increment', TMode> & {
        abi?: never
        functionName?: 'increment'
      } = {} as any,
) {
  return useContractWrite<typeof counterABI, 'increment', TMode>({
    abi: counterABI,
    functionName: 'increment',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"setNumber"`.
 */
export function useCounterSetNumber<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof counterABI,
          'setNumber'
        >['request']['abi'],
        'setNumber',
        TMode
      > & { functionName?: 'setNumber' }
    : UseContractWriteConfig<typeof counterABI, 'setNumber', TMode> & {
        abi?: never
        functionName?: 'setNumber'
      } = {} as any,
) {
  return useContractWrite<typeof counterABI, 'setNumber', TMode>({
    abi: counterABI,
    functionName: 'setNumber',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__.
 */
export function usePrepareCounterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"increment"`.
 */
export function usePrepareCounterIncrement(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, 'increment'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterABI,
    functionName: 'increment',
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterABI, 'increment'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"setNumber"`.
 */
export function usePrepareCounterSetNumber(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, 'setNumber'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterABI,
    functionName: 'setNumber',
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterABI, 'setNumber'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof counterABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterABI,
    ...config,
  } as UseContractEventConfig<typeof counterABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterABI}__ and `eventName` set to `"Transfer"`.
 */
export function useCounterTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof counterABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof counterABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20ABI, ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20Allowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, TFunctionName, TMode>({
    abi: ierc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc20ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'approve', TMode>({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof ierc20ABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'transfer', TMode>({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof ierc20ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'transferFrom', TMode>({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function usePrepareIerc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLayerZeroEndpointABI}__.
 */
export function useILayerZeroEndpointRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iLayerZeroEndpointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iLayerZeroEndpointABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iLayerZeroEndpointABI,
    ...config,
  } as UseContractReadConfig<
    typeof iLayerZeroEndpointABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLayerZeroEndpointABI}__ and `functionName` set to `"estimateFees"`.
 */
export function useILayerZeroEndpointEstimateFees<
  TFunctionName extends 'estimateFees',
  TSelectData = ReadContractResult<typeof iLayerZeroEndpointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iLayerZeroEndpointABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLayerZeroEndpointABI,
    functionName: 'estimateFees',
    ...config,
  } as UseContractReadConfig<
    typeof iLayerZeroEndpointABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLayerZeroEndpointABI}__ and `functionName` set to `"getChainId"`.
 */
export function useILayerZeroEndpointGetChainId<
  TFunctionName extends 'getChainId',
  TSelectData = ReadContractResult<typeof iLayerZeroEndpointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iLayerZeroEndpointABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLayerZeroEndpointABI,
    functionName: 'getChainId',
    ...config,
  } as UseContractReadConfig<
    typeof iLayerZeroEndpointABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLayerZeroEndpointABI}__ and `functionName` set to `"getConfig"`.
 */
export function useILayerZeroEndpointGetConfig<
  TFunctionName extends 'getConfig',
  TSelectData = ReadContractResult<typeof iLayerZeroEndpointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iLayerZeroEndpointABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLayerZeroEndpointABI,
    functionName: 'getConfig',
    ...config,
  } as UseContractReadConfig<
    typeof iLayerZeroEndpointABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLayerZeroEndpointABI}__ and `functionName` set to `"getInboundNonce"`.
 */
export function useILayerZeroEndpointGetInboundNonce<
  TFunctionName extends 'getInboundNonce',
  TSelectData = ReadContractResult<typeof iLayerZeroEndpointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iLayerZeroEndpointABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLayerZeroEndpointABI,
    functionName: 'getInboundNonce',
    ...config,
  } as UseContractReadConfig<
    typeof iLayerZeroEndpointABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLayerZeroEndpointABI}__ and `functionName` set to `"getOutboundNonce"`.
 */
export function useILayerZeroEndpointGetOutboundNonce<
  TFunctionName extends 'getOutboundNonce',
  TSelectData = ReadContractResult<typeof iLayerZeroEndpointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iLayerZeroEndpointABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLayerZeroEndpointABI,
    functionName: 'getOutboundNonce',
    ...config,
  } as UseContractReadConfig<
    typeof iLayerZeroEndpointABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLayerZeroEndpointABI}__ and `functionName` set to `"getReceiveLibraryAddress"`.
 */
export function useILayerZeroEndpointGetReceiveLibraryAddress<
  TFunctionName extends 'getReceiveLibraryAddress',
  TSelectData = ReadContractResult<typeof iLayerZeroEndpointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iLayerZeroEndpointABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLayerZeroEndpointABI,
    functionName: 'getReceiveLibraryAddress',
    ...config,
  } as UseContractReadConfig<
    typeof iLayerZeroEndpointABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLayerZeroEndpointABI}__ and `functionName` set to `"getReceiveVersion"`.
 */
export function useILayerZeroEndpointGetReceiveVersion<
  TFunctionName extends 'getReceiveVersion',
  TSelectData = ReadContractResult<typeof iLayerZeroEndpointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iLayerZeroEndpointABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLayerZeroEndpointABI,
    functionName: 'getReceiveVersion',
    ...config,
  } as UseContractReadConfig<
    typeof iLayerZeroEndpointABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLayerZeroEndpointABI}__ and `functionName` set to `"getSendLibraryAddress"`.
 */
export function useILayerZeroEndpointGetSendLibraryAddress<
  TFunctionName extends 'getSendLibraryAddress',
  TSelectData = ReadContractResult<typeof iLayerZeroEndpointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iLayerZeroEndpointABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLayerZeroEndpointABI,
    functionName: 'getSendLibraryAddress',
    ...config,
  } as UseContractReadConfig<
    typeof iLayerZeroEndpointABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLayerZeroEndpointABI}__ and `functionName` set to `"getSendVersion"`.
 */
export function useILayerZeroEndpointGetSendVersion<
  TFunctionName extends 'getSendVersion',
  TSelectData = ReadContractResult<typeof iLayerZeroEndpointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iLayerZeroEndpointABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLayerZeroEndpointABI,
    functionName: 'getSendVersion',
    ...config,
  } as UseContractReadConfig<
    typeof iLayerZeroEndpointABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLayerZeroEndpointABI}__ and `functionName` set to `"hasStoredPayload"`.
 */
export function useILayerZeroEndpointHasStoredPayload<
  TFunctionName extends 'hasStoredPayload',
  TSelectData = ReadContractResult<typeof iLayerZeroEndpointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iLayerZeroEndpointABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLayerZeroEndpointABI,
    functionName: 'hasStoredPayload',
    ...config,
  } as UseContractReadConfig<
    typeof iLayerZeroEndpointABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLayerZeroEndpointABI}__ and `functionName` set to `"isReceivingPayload"`.
 */
export function useILayerZeroEndpointIsReceivingPayload<
  TFunctionName extends 'isReceivingPayload',
  TSelectData = ReadContractResult<typeof iLayerZeroEndpointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iLayerZeroEndpointABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLayerZeroEndpointABI,
    functionName: 'isReceivingPayload',
    ...config,
  } as UseContractReadConfig<
    typeof iLayerZeroEndpointABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLayerZeroEndpointABI}__ and `functionName` set to `"isSendingPayload"`.
 */
export function useILayerZeroEndpointIsSendingPayload<
  TFunctionName extends 'isSendingPayload',
  TSelectData = ReadContractResult<typeof iLayerZeroEndpointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iLayerZeroEndpointABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLayerZeroEndpointABI,
    functionName: 'isSendingPayload',
    ...config,
  } as UseContractReadConfig<
    typeof iLayerZeroEndpointABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLayerZeroEndpointABI}__.
 */
export function useILayerZeroEndpointWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iLayerZeroEndpointABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iLayerZeroEndpointABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iLayerZeroEndpointABI, TFunctionName, TMode>({
    abi: iLayerZeroEndpointABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLayerZeroEndpointABI}__ and `functionName` set to `"forceResumeReceive"`.
 */
export function useILayerZeroEndpointForceResumeReceive<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iLayerZeroEndpointABI,
          'forceResumeReceive'
        >['request']['abi'],
        'forceResumeReceive',
        TMode
      > & { functionName?: 'forceResumeReceive' }
    : UseContractWriteConfig<
        typeof iLayerZeroEndpointABI,
        'forceResumeReceive',
        TMode
      > & {
        abi?: never
        functionName?: 'forceResumeReceive'
      } = {} as any,
) {
  return useContractWrite<
    typeof iLayerZeroEndpointABI,
    'forceResumeReceive',
    TMode
  >({
    abi: iLayerZeroEndpointABI,
    functionName: 'forceResumeReceive',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLayerZeroEndpointABI}__ and `functionName` set to `"receivePayload"`.
 */
export function useILayerZeroEndpointReceivePayload<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iLayerZeroEndpointABI,
          'receivePayload'
        >['request']['abi'],
        'receivePayload',
        TMode
      > & { functionName?: 'receivePayload' }
    : UseContractWriteConfig<
        typeof iLayerZeroEndpointABI,
        'receivePayload',
        TMode
      > & {
        abi?: never
        functionName?: 'receivePayload'
      } = {} as any,
) {
  return useContractWrite<
    typeof iLayerZeroEndpointABI,
    'receivePayload',
    TMode
  >({
    abi: iLayerZeroEndpointABI,
    functionName: 'receivePayload',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLayerZeroEndpointABI}__ and `functionName` set to `"retryPayload"`.
 */
export function useILayerZeroEndpointRetryPayload<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iLayerZeroEndpointABI,
          'retryPayload'
        >['request']['abi'],
        'retryPayload',
        TMode
      > & { functionName?: 'retryPayload' }
    : UseContractWriteConfig<
        typeof iLayerZeroEndpointABI,
        'retryPayload',
        TMode
      > & {
        abi?: never
        functionName?: 'retryPayload'
      } = {} as any,
) {
  return useContractWrite<typeof iLayerZeroEndpointABI, 'retryPayload', TMode>({
    abi: iLayerZeroEndpointABI,
    functionName: 'retryPayload',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLayerZeroEndpointABI}__ and `functionName` set to `"send"`.
 */
export function useILayerZeroEndpointSend<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iLayerZeroEndpointABI,
          'send'
        >['request']['abi'],
        'send',
        TMode
      > & { functionName?: 'send' }
    : UseContractWriteConfig<typeof iLayerZeroEndpointABI, 'send', TMode> & {
        abi?: never
        functionName?: 'send'
      } = {} as any,
) {
  return useContractWrite<typeof iLayerZeroEndpointABI, 'send', TMode>({
    abi: iLayerZeroEndpointABI,
    functionName: 'send',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLayerZeroEndpointABI}__ and `functionName` set to `"setConfig"`.
 */
export function useILayerZeroEndpointSetConfig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iLayerZeroEndpointABI,
          'setConfig'
        >['request']['abi'],
        'setConfig',
        TMode
      > & { functionName?: 'setConfig' }
    : UseContractWriteConfig<
        typeof iLayerZeroEndpointABI,
        'setConfig',
        TMode
      > & {
        abi?: never
        functionName?: 'setConfig'
      } = {} as any,
) {
  return useContractWrite<typeof iLayerZeroEndpointABI, 'setConfig', TMode>({
    abi: iLayerZeroEndpointABI,
    functionName: 'setConfig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLayerZeroEndpointABI}__ and `functionName` set to `"setReceiveVersion"`.
 */
export function useILayerZeroEndpointSetReceiveVersion<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iLayerZeroEndpointABI,
          'setReceiveVersion'
        >['request']['abi'],
        'setReceiveVersion',
        TMode
      > & { functionName?: 'setReceiveVersion' }
    : UseContractWriteConfig<
        typeof iLayerZeroEndpointABI,
        'setReceiveVersion',
        TMode
      > & {
        abi?: never
        functionName?: 'setReceiveVersion'
      } = {} as any,
) {
  return useContractWrite<
    typeof iLayerZeroEndpointABI,
    'setReceiveVersion',
    TMode
  >({
    abi: iLayerZeroEndpointABI,
    functionName: 'setReceiveVersion',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLayerZeroEndpointABI}__ and `functionName` set to `"setSendVersion"`.
 */
export function useILayerZeroEndpointSetSendVersion<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iLayerZeroEndpointABI,
          'setSendVersion'
        >['request']['abi'],
        'setSendVersion',
        TMode
      > & { functionName?: 'setSendVersion' }
    : UseContractWriteConfig<
        typeof iLayerZeroEndpointABI,
        'setSendVersion',
        TMode
      > & {
        abi?: never
        functionName?: 'setSendVersion'
      } = {} as any,
) {
  return useContractWrite<
    typeof iLayerZeroEndpointABI,
    'setSendVersion',
    TMode
  >({
    abi: iLayerZeroEndpointABI,
    functionName: 'setSendVersion',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLayerZeroEndpointABI}__.
 */
export function usePrepareILayerZeroEndpointWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLayerZeroEndpointABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLayerZeroEndpointABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iLayerZeroEndpointABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLayerZeroEndpointABI}__ and `functionName` set to `"forceResumeReceive"`.
 */
export function usePrepareILayerZeroEndpointForceResumeReceive(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iLayerZeroEndpointABI,
      'forceResumeReceive'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLayerZeroEndpointABI,
    functionName: 'forceResumeReceive',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iLayerZeroEndpointABI,
    'forceResumeReceive'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLayerZeroEndpointABI}__ and `functionName` set to `"receivePayload"`.
 */
export function usePrepareILayerZeroEndpointReceivePayload(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iLayerZeroEndpointABI,
      'receivePayload'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLayerZeroEndpointABI,
    functionName: 'receivePayload',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iLayerZeroEndpointABI,
    'receivePayload'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLayerZeroEndpointABI}__ and `functionName` set to `"retryPayload"`.
 */
export function usePrepareILayerZeroEndpointRetryPayload(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLayerZeroEndpointABI, 'retryPayload'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLayerZeroEndpointABI,
    functionName: 'retryPayload',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iLayerZeroEndpointABI,
    'retryPayload'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLayerZeroEndpointABI}__ and `functionName` set to `"send"`.
 */
export function usePrepareILayerZeroEndpointSend(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLayerZeroEndpointABI, 'send'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLayerZeroEndpointABI,
    functionName: 'send',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLayerZeroEndpointABI, 'send'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLayerZeroEndpointABI}__ and `functionName` set to `"setConfig"`.
 */
export function usePrepareILayerZeroEndpointSetConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLayerZeroEndpointABI, 'setConfig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLayerZeroEndpointABI,
    functionName: 'setConfig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLayerZeroEndpointABI, 'setConfig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLayerZeroEndpointABI}__ and `functionName` set to `"setReceiveVersion"`.
 */
export function usePrepareILayerZeroEndpointSetReceiveVersion(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iLayerZeroEndpointABI,
      'setReceiveVersion'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLayerZeroEndpointABI,
    functionName: 'setReceiveVersion',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iLayerZeroEndpointABI,
    'setReceiveVersion'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLayerZeroEndpointABI}__ and `functionName` set to `"setSendVersion"`.
 */
export function usePrepareILayerZeroEndpointSetSendVersion(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iLayerZeroEndpointABI,
      'setSendVersion'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLayerZeroEndpointABI,
    functionName: 'setSendVersion',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iLayerZeroEndpointABI,
    'setSendVersion'
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLayerZeroReceiverABI}__.
 */
export function useILayerZeroReceiverWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iLayerZeroReceiverABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iLayerZeroReceiverABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iLayerZeroReceiverABI, TFunctionName, TMode>({
    abi: iLayerZeroReceiverABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLayerZeroReceiverABI}__ and `functionName` set to `"lzReceive"`.
 */
export function useILayerZeroReceiverLzReceive<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iLayerZeroReceiverABI,
          'lzReceive'
        >['request']['abi'],
        'lzReceive',
        TMode
      > & { functionName?: 'lzReceive' }
    : UseContractWriteConfig<
        typeof iLayerZeroReceiverABI,
        'lzReceive',
        TMode
      > & {
        abi?: never
        functionName?: 'lzReceive'
      } = {} as any,
) {
  return useContractWrite<typeof iLayerZeroReceiverABI, 'lzReceive', TMode>({
    abi: iLayerZeroReceiverABI,
    functionName: 'lzReceive',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLayerZeroReceiverABI}__.
 */
export function usePrepareILayerZeroReceiverWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLayerZeroReceiverABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLayerZeroReceiverABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iLayerZeroReceiverABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLayerZeroReceiverABI}__ and `functionName` set to `"lzReceive"`.
 */
export function usePrepareILayerZeroReceiverLzReceive(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLayerZeroReceiverABI, 'lzReceive'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLayerZeroReceiverABI,
    functionName: 'lzReceive',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLayerZeroReceiverABI, 'lzReceive'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLayerZeroUserApplicationConfigABI}__.
 */
export function useILayerZeroUserApplicationConfigWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iLayerZeroUserApplicationConfigABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iLayerZeroUserApplicationConfigABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof iLayerZeroUserApplicationConfigABI,
    TFunctionName,
    TMode
  >({ abi: iLayerZeroUserApplicationConfigABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLayerZeroUserApplicationConfigABI}__ and `functionName` set to `"forceResumeReceive"`.
 */
export function useILayerZeroUserApplicationConfigForceResumeReceive<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iLayerZeroUserApplicationConfigABI,
          'forceResumeReceive'
        >['request']['abi'],
        'forceResumeReceive',
        TMode
      > & { functionName?: 'forceResumeReceive' }
    : UseContractWriteConfig<
        typeof iLayerZeroUserApplicationConfigABI,
        'forceResumeReceive',
        TMode
      > & {
        abi?: never
        functionName?: 'forceResumeReceive'
      } = {} as any,
) {
  return useContractWrite<
    typeof iLayerZeroUserApplicationConfigABI,
    'forceResumeReceive',
    TMode
  >({
    abi: iLayerZeroUserApplicationConfigABI,
    functionName: 'forceResumeReceive',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLayerZeroUserApplicationConfigABI}__ and `functionName` set to `"setConfig"`.
 */
export function useILayerZeroUserApplicationConfigSetConfig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iLayerZeroUserApplicationConfigABI,
          'setConfig'
        >['request']['abi'],
        'setConfig',
        TMode
      > & { functionName?: 'setConfig' }
    : UseContractWriteConfig<
        typeof iLayerZeroUserApplicationConfigABI,
        'setConfig',
        TMode
      > & {
        abi?: never
        functionName?: 'setConfig'
      } = {} as any,
) {
  return useContractWrite<
    typeof iLayerZeroUserApplicationConfigABI,
    'setConfig',
    TMode
  >({
    abi: iLayerZeroUserApplicationConfigABI,
    functionName: 'setConfig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLayerZeroUserApplicationConfigABI}__ and `functionName` set to `"setReceiveVersion"`.
 */
export function useILayerZeroUserApplicationConfigSetReceiveVersion<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iLayerZeroUserApplicationConfigABI,
          'setReceiveVersion'
        >['request']['abi'],
        'setReceiveVersion',
        TMode
      > & { functionName?: 'setReceiveVersion' }
    : UseContractWriteConfig<
        typeof iLayerZeroUserApplicationConfigABI,
        'setReceiveVersion',
        TMode
      > & {
        abi?: never
        functionName?: 'setReceiveVersion'
      } = {} as any,
) {
  return useContractWrite<
    typeof iLayerZeroUserApplicationConfigABI,
    'setReceiveVersion',
    TMode
  >({
    abi: iLayerZeroUserApplicationConfigABI,
    functionName: 'setReceiveVersion',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLayerZeroUserApplicationConfigABI}__ and `functionName` set to `"setSendVersion"`.
 */
export function useILayerZeroUserApplicationConfigSetSendVersion<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iLayerZeroUserApplicationConfigABI,
          'setSendVersion'
        >['request']['abi'],
        'setSendVersion',
        TMode
      > & { functionName?: 'setSendVersion' }
    : UseContractWriteConfig<
        typeof iLayerZeroUserApplicationConfigABI,
        'setSendVersion',
        TMode
      > & {
        abi?: never
        functionName?: 'setSendVersion'
      } = {} as any,
) {
  return useContractWrite<
    typeof iLayerZeroUserApplicationConfigABI,
    'setSendVersion',
    TMode
  >({
    abi: iLayerZeroUserApplicationConfigABI,
    functionName: 'setSendVersion',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLayerZeroUserApplicationConfigABI}__.
 */
export function usePrepareILayerZeroUserApplicationConfigWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iLayerZeroUserApplicationConfigABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLayerZeroUserApplicationConfigABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iLayerZeroUserApplicationConfigABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLayerZeroUserApplicationConfigABI}__ and `functionName` set to `"forceResumeReceive"`.
 */
export function usePrepareILayerZeroUserApplicationConfigForceResumeReceive(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iLayerZeroUserApplicationConfigABI,
      'forceResumeReceive'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLayerZeroUserApplicationConfigABI,
    functionName: 'forceResumeReceive',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iLayerZeroUserApplicationConfigABI,
    'forceResumeReceive'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLayerZeroUserApplicationConfigABI}__ and `functionName` set to `"setConfig"`.
 */
export function usePrepareILayerZeroUserApplicationConfigSetConfig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iLayerZeroUserApplicationConfigABI,
      'setConfig'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLayerZeroUserApplicationConfigABI,
    functionName: 'setConfig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iLayerZeroUserApplicationConfigABI,
    'setConfig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLayerZeroUserApplicationConfigABI}__ and `functionName` set to `"setReceiveVersion"`.
 */
export function usePrepareILayerZeroUserApplicationConfigSetReceiveVersion(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iLayerZeroUserApplicationConfigABI,
      'setReceiveVersion'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLayerZeroUserApplicationConfigABI,
    functionName: 'setReceiveVersion',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iLayerZeroUserApplicationConfigABI,
    'setReceiveVersion'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLayerZeroUserApplicationConfigABI}__ and `functionName` set to `"setSendVersion"`.
 */
export function usePrepareILayerZeroUserApplicationConfigSetSendVersion(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iLayerZeroUserApplicationConfigABI,
      'setSendVersion'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLayerZeroUserApplicationConfigABI,
    functionName: 'setSendVersion',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iLayerZeroUserApplicationConfigABI,
    'setSendVersion'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nonblockingLzAppABI}__.
 */
export function useNonblockingLzAppRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof nonblockingLzAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nonblockingLzAppABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: nonblockingLzAppABI,
    ...config,
  } as UseContractReadConfig<
    typeof nonblockingLzAppABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"DEFAULT_PAYLOAD_SIZE_LIMIT"`.
 */
export function useNonblockingLzAppDefaultPayloadSizeLimit<
  TFunctionName extends 'DEFAULT_PAYLOAD_SIZE_LIMIT',
  TSelectData = ReadContractResult<typeof nonblockingLzAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nonblockingLzAppABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: nonblockingLzAppABI,
    functionName: 'DEFAULT_PAYLOAD_SIZE_LIMIT',
    ...config,
  } as UseContractReadConfig<
    typeof nonblockingLzAppABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"failedMessages"`.
 */
export function useNonblockingLzAppFailedMessages<
  TFunctionName extends 'failedMessages',
  TSelectData = ReadContractResult<typeof nonblockingLzAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nonblockingLzAppABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: nonblockingLzAppABI,
    functionName: 'failedMessages',
    ...config,
  } as UseContractReadConfig<
    typeof nonblockingLzAppABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"getConfig"`.
 */
export function useNonblockingLzAppGetConfig<
  TFunctionName extends 'getConfig',
  TSelectData = ReadContractResult<typeof nonblockingLzAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nonblockingLzAppABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: nonblockingLzAppABI,
    functionName: 'getConfig',
    ...config,
  } as UseContractReadConfig<
    typeof nonblockingLzAppABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"getTrustedRemoteAddress"`.
 */
export function useNonblockingLzAppGetTrustedRemoteAddress<
  TFunctionName extends 'getTrustedRemoteAddress',
  TSelectData = ReadContractResult<typeof nonblockingLzAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nonblockingLzAppABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: nonblockingLzAppABI,
    functionName: 'getTrustedRemoteAddress',
    ...config,
  } as UseContractReadConfig<
    typeof nonblockingLzAppABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"isTrustedRemote"`.
 */
export function useNonblockingLzAppIsTrustedRemote<
  TFunctionName extends 'isTrustedRemote',
  TSelectData = ReadContractResult<typeof nonblockingLzAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nonblockingLzAppABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: nonblockingLzAppABI,
    functionName: 'isTrustedRemote',
    ...config,
  } as UseContractReadConfig<
    typeof nonblockingLzAppABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"lzEndpoint"`.
 */
export function useNonblockingLzAppLzEndpoint<
  TFunctionName extends 'lzEndpoint',
  TSelectData = ReadContractResult<typeof nonblockingLzAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nonblockingLzAppABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: nonblockingLzAppABI,
    functionName: 'lzEndpoint',
    ...config,
  } as UseContractReadConfig<
    typeof nonblockingLzAppABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"minDstGasLookup"`.
 */
export function useNonblockingLzAppMinDstGasLookup<
  TFunctionName extends 'minDstGasLookup',
  TSelectData = ReadContractResult<typeof nonblockingLzAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nonblockingLzAppABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: nonblockingLzAppABI,
    functionName: 'minDstGasLookup',
    ...config,
  } as UseContractReadConfig<
    typeof nonblockingLzAppABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"owner"`.
 */
export function useNonblockingLzAppOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof nonblockingLzAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nonblockingLzAppABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: nonblockingLzAppABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof nonblockingLzAppABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"payloadSizeLimitLookup"`.
 */
export function useNonblockingLzAppPayloadSizeLimitLookup<
  TFunctionName extends 'payloadSizeLimitLookup',
  TSelectData = ReadContractResult<typeof nonblockingLzAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nonblockingLzAppABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: nonblockingLzAppABI,
    functionName: 'payloadSizeLimitLookup',
    ...config,
  } as UseContractReadConfig<
    typeof nonblockingLzAppABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"precrime"`.
 */
export function useNonblockingLzAppPrecrime<
  TFunctionName extends 'precrime',
  TSelectData = ReadContractResult<typeof nonblockingLzAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nonblockingLzAppABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: nonblockingLzAppABI,
    functionName: 'precrime',
    ...config,
  } as UseContractReadConfig<
    typeof nonblockingLzAppABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"trustedRemoteLookup"`.
 */
export function useNonblockingLzAppTrustedRemoteLookup<
  TFunctionName extends 'trustedRemoteLookup',
  TSelectData = ReadContractResult<typeof nonblockingLzAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nonblockingLzAppABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: nonblockingLzAppABI,
    functionName: 'trustedRemoteLookup',
    ...config,
  } as UseContractReadConfig<
    typeof nonblockingLzAppABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__.
 */
export function useNonblockingLzAppWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nonblockingLzAppABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof nonblockingLzAppABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof nonblockingLzAppABI, TFunctionName, TMode>({
    abi: nonblockingLzAppABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"forceResumeReceive"`.
 */
export function useNonblockingLzAppForceResumeReceive<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nonblockingLzAppABI,
          'forceResumeReceive'
        >['request']['abi'],
        'forceResumeReceive',
        TMode
      > & { functionName?: 'forceResumeReceive' }
    : UseContractWriteConfig<
        typeof nonblockingLzAppABI,
        'forceResumeReceive',
        TMode
      > & {
        abi?: never
        functionName?: 'forceResumeReceive'
      } = {} as any,
) {
  return useContractWrite<
    typeof nonblockingLzAppABI,
    'forceResumeReceive',
    TMode
  >({
    abi: nonblockingLzAppABI,
    functionName: 'forceResumeReceive',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"lzReceive"`.
 */
export function useNonblockingLzAppLzReceive<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nonblockingLzAppABI,
          'lzReceive'
        >['request']['abi'],
        'lzReceive',
        TMode
      > & { functionName?: 'lzReceive' }
    : UseContractWriteConfig<typeof nonblockingLzAppABI, 'lzReceive', TMode> & {
        abi?: never
        functionName?: 'lzReceive'
      } = {} as any,
) {
  return useContractWrite<typeof nonblockingLzAppABI, 'lzReceive', TMode>({
    abi: nonblockingLzAppABI,
    functionName: 'lzReceive',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"nonblockingLzReceive"`.
 */
export function useNonblockingLzAppNonblockingLzReceive<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nonblockingLzAppABI,
          'nonblockingLzReceive'
        >['request']['abi'],
        'nonblockingLzReceive',
        TMode
      > & { functionName?: 'nonblockingLzReceive' }
    : UseContractWriteConfig<
        typeof nonblockingLzAppABI,
        'nonblockingLzReceive',
        TMode
      > & {
        abi?: never
        functionName?: 'nonblockingLzReceive'
      } = {} as any,
) {
  return useContractWrite<
    typeof nonblockingLzAppABI,
    'nonblockingLzReceive',
    TMode
  >({
    abi: nonblockingLzAppABI,
    functionName: 'nonblockingLzReceive',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useNonblockingLzAppRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nonblockingLzAppABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof nonblockingLzAppABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof nonblockingLzAppABI,
    'renounceOwnership',
    TMode
  >({
    abi: nonblockingLzAppABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"retryMessage"`.
 */
export function useNonblockingLzAppRetryMessage<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nonblockingLzAppABI,
          'retryMessage'
        >['request']['abi'],
        'retryMessage',
        TMode
      > & { functionName?: 'retryMessage' }
    : UseContractWriteConfig<
        typeof nonblockingLzAppABI,
        'retryMessage',
        TMode
      > & {
        abi?: never
        functionName?: 'retryMessage'
      } = {} as any,
) {
  return useContractWrite<typeof nonblockingLzAppABI, 'retryMessage', TMode>({
    abi: nonblockingLzAppABI,
    functionName: 'retryMessage',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"setConfig"`.
 */
export function useNonblockingLzAppSetConfig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nonblockingLzAppABI,
          'setConfig'
        >['request']['abi'],
        'setConfig',
        TMode
      > & { functionName?: 'setConfig' }
    : UseContractWriteConfig<typeof nonblockingLzAppABI, 'setConfig', TMode> & {
        abi?: never
        functionName?: 'setConfig'
      } = {} as any,
) {
  return useContractWrite<typeof nonblockingLzAppABI, 'setConfig', TMode>({
    abi: nonblockingLzAppABI,
    functionName: 'setConfig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"setMinDstGas"`.
 */
export function useNonblockingLzAppSetMinDstGas<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nonblockingLzAppABI,
          'setMinDstGas'
        >['request']['abi'],
        'setMinDstGas',
        TMode
      > & { functionName?: 'setMinDstGas' }
    : UseContractWriteConfig<
        typeof nonblockingLzAppABI,
        'setMinDstGas',
        TMode
      > & {
        abi?: never
        functionName?: 'setMinDstGas'
      } = {} as any,
) {
  return useContractWrite<typeof nonblockingLzAppABI, 'setMinDstGas', TMode>({
    abi: nonblockingLzAppABI,
    functionName: 'setMinDstGas',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"setPayloadSizeLimit"`.
 */
export function useNonblockingLzAppSetPayloadSizeLimit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nonblockingLzAppABI,
          'setPayloadSizeLimit'
        >['request']['abi'],
        'setPayloadSizeLimit',
        TMode
      > & { functionName?: 'setPayloadSizeLimit' }
    : UseContractWriteConfig<
        typeof nonblockingLzAppABI,
        'setPayloadSizeLimit',
        TMode
      > & {
        abi?: never
        functionName?: 'setPayloadSizeLimit'
      } = {} as any,
) {
  return useContractWrite<
    typeof nonblockingLzAppABI,
    'setPayloadSizeLimit',
    TMode
  >({
    abi: nonblockingLzAppABI,
    functionName: 'setPayloadSizeLimit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"setPrecrime"`.
 */
export function useNonblockingLzAppSetPrecrime<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nonblockingLzAppABI,
          'setPrecrime'
        >['request']['abi'],
        'setPrecrime',
        TMode
      > & { functionName?: 'setPrecrime' }
    : UseContractWriteConfig<
        typeof nonblockingLzAppABI,
        'setPrecrime',
        TMode
      > & {
        abi?: never
        functionName?: 'setPrecrime'
      } = {} as any,
) {
  return useContractWrite<typeof nonblockingLzAppABI, 'setPrecrime', TMode>({
    abi: nonblockingLzAppABI,
    functionName: 'setPrecrime',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"setReceiveVersion"`.
 */
export function useNonblockingLzAppSetReceiveVersion<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nonblockingLzAppABI,
          'setReceiveVersion'
        >['request']['abi'],
        'setReceiveVersion',
        TMode
      > & { functionName?: 'setReceiveVersion' }
    : UseContractWriteConfig<
        typeof nonblockingLzAppABI,
        'setReceiveVersion',
        TMode
      > & {
        abi?: never
        functionName?: 'setReceiveVersion'
      } = {} as any,
) {
  return useContractWrite<
    typeof nonblockingLzAppABI,
    'setReceiveVersion',
    TMode
  >({
    abi: nonblockingLzAppABI,
    functionName: 'setReceiveVersion',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"setSendVersion"`.
 */
export function useNonblockingLzAppSetSendVersion<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nonblockingLzAppABI,
          'setSendVersion'
        >['request']['abi'],
        'setSendVersion',
        TMode
      > & { functionName?: 'setSendVersion' }
    : UseContractWriteConfig<
        typeof nonblockingLzAppABI,
        'setSendVersion',
        TMode
      > & {
        abi?: never
        functionName?: 'setSendVersion'
      } = {} as any,
) {
  return useContractWrite<typeof nonblockingLzAppABI, 'setSendVersion', TMode>({
    abi: nonblockingLzAppABI,
    functionName: 'setSendVersion',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"setTrustedRemote"`.
 */
export function useNonblockingLzAppSetTrustedRemote<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nonblockingLzAppABI,
          'setTrustedRemote'
        >['request']['abi'],
        'setTrustedRemote',
        TMode
      > & { functionName?: 'setTrustedRemote' }
    : UseContractWriteConfig<
        typeof nonblockingLzAppABI,
        'setTrustedRemote',
        TMode
      > & {
        abi?: never
        functionName?: 'setTrustedRemote'
      } = {} as any,
) {
  return useContractWrite<
    typeof nonblockingLzAppABI,
    'setTrustedRemote',
    TMode
  >({
    abi: nonblockingLzAppABI,
    functionName: 'setTrustedRemote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"setTrustedRemoteAddress"`.
 */
export function useNonblockingLzAppSetTrustedRemoteAddress<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nonblockingLzAppABI,
          'setTrustedRemoteAddress'
        >['request']['abi'],
        'setTrustedRemoteAddress',
        TMode
      > & { functionName?: 'setTrustedRemoteAddress' }
    : UseContractWriteConfig<
        typeof nonblockingLzAppABI,
        'setTrustedRemoteAddress',
        TMode
      > & {
        abi?: never
        functionName?: 'setTrustedRemoteAddress'
      } = {} as any,
) {
  return useContractWrite<
    typeof nonblockingLzAppABI,
    'setTrustedRemoteAddress',
    TMode
  >({
    abi: nonblockingLzAppABI,
    functionName: 'setTrustedRemoteAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useNonblockingLzAppTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nonblockingLzAppABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof nonblockingLzAppABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof nonblockingLzAppABI,
    'transferOwnership',
    TMode
  >({
    abi: nonblockingLzAppABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__.
 */
export function usePrepareNonblockingLzAppWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nonblockingLzAppABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nonblockingLzAppABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof nonblockingLzAppABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"forceResumeReceive"`.
 */
export function usePrepareNonblockingLzAppForceResumeReceive(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof nonblockingLzAppABI,
      'forceResumeReceive'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nonblockingLzAppABI,
    functionName: 'forceResumeReceive',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nonblockingLzAppABI,
    'forceResumeReceive'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"lzReceive"`.
 */
export function usePrepareNonblockingLzAppLzReceive(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nonblockingLzAppABI, 'lzReceive'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nonblockingLzAppABI,
    functionName: 'lzReceive',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nonblockingLzAppABI, 'lzReceive'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"nonblockingLzReceive"`.
 */
export function usePrepareNonblockingLzAppNonblockingLzReceive(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof nonblockingLzAppABI,
      'nonblockingLzReceive'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nonblockingLzAppABI,
    functionName: 'nonblockingLzReceive',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nonblockingLzAppABI,
    'nonblockingLzReceive'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareNonblockingLzAppRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof nonblockingLzAppABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nonblockingLzAppABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nonblockingLzAppABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"retryMessage"`.
 */
export function usePrepareNonblockingLzAppRetryMessage(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nonblockingLzAppABI, 'retryMessage'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nonblockingLzAppABI,
    functionName: 'retryMessage',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nonblockingLzAppABI,
    'retryMessage'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"setConfig"`.
 */
export function usePrepareNonblockingLzAppSetConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nonblockingLzAppABI, 'setConfig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nonblockingLzAppABI,
    functionName: 'setConfig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nonblockingLzAppABI, 'setConfig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"setMinDstGas"`.
 */
export function usePrepareNonblockingLzAppSetMinDstGas(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nonblockingLzAppABI, 'setMinDstGas'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nonblockingLzAppABI,
    functionName: 'setMinDstGas',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nonblockingLzAppABI,
    'setMinDstGas'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"setPayloadSizeLimit"`.
 */
export function usePrepareNonblockingLzAppSetPayloadSizeLimit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof nonblockingLzAppABI,
      'setPayloadSizeLimit'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nonblockingLzAppABI,
    functionName: 'setPayloadSizeLimit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nonblockingLzAppABI,
    'setPayloadSizeLimit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"setPrecrime"`.
 */
export function usePrepareNonblockingLzAppSetPrecrime(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nonblockingLzAppABI, 'setPrecrime'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nonblockingLzAppABI,
    functionName: 'setPrecrime',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nonblockingLzAppABI, 'setPrecrime'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"setReceiveVersion"`.
 */
export function usePrepareNonblockingLzAppSetReceiveVersion(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof nonblockingLzAppABI,
      'setReceiveVersion'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nonblockingLzAppABI,
    functionName: 'setReceiveVersion',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nonblockingLzAppABI,
    'setReceiveVersion'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"setSendVersion"`.
 */
export function usePrepareNonblockingLzAppSetSendVersion(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nonblockingLzAppABI, 'setSendVersion'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nonblockingLzAppABI,
    functionName: 'setSendVersion',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nonblockingLzAppABI,
    'setSendVersion'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"setTrustedRemote"`.
 */
export function usePrepareNonblockingLzAppSetTrustedRemote(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof nonblockingLzAppABI,
      'setTrustedRemote'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nonblockingLzAppABI,
    functionName: 'setTrustedRemote',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nonblockingLzAppABI,
    'setTrustedRemote'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"setTrustedRemoteAddress"`.
 */
export function usePrepareNonblockingLzAppSetTrustedRemoteAddress(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof nonblockingLzAppABI,
      'setTrustedRemoteAddress'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nonblockingLzAppABI,
    functionName: 'setTrustedRemoteAddress',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nonblockingLzAppABI,
    'setTrustedRemoteAddress'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareNonblockingLzAppTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof nonblockingLzAppABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nonblockingLzAppABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nonblockingLzAppABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nonblockingLzAppABI}__.
 */
export function useNonblockingLzAppEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof nonblockingLzAppABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: nonblockingLzAppABI,
    ...config,
  } as UseContractEventConfig<typeof nonblockingLzAppABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `eventName` set to `"MessageFailed"`.
 */
export function useNonblockingLzAppMessageFailedEvent(
  config: Omit<
    UseContractEventConfig<typeof nonblockingLzAppABI, 'MessageFailed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: nonblockingLzAppABI,
    eventName: 'MessageFailed',
    ...config,
  } as UseContractEventConfig<typeof nonblockingLzAppABI, 'MessageFailed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useNonblockingLzAppOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof nonblockingLzAppABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: nonblockingLzAppABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof nonblockingLzAppABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `eventName` set to `"RetryMessageSuccess"`.
 */
export function useNonblockingLzAppRetryMessageSuccessEvent(
  config: Omit<
    UseContractEventConfig<typeof nonblockingLzAppABI, 'RetryMessageSuccess'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: nonblockingLzAppABI,
    eventName: 'RetryMessageSuccess',
    ...config,
  } as UseContractEventConfig<
    typeof nonblockingLzAppABI,
    'RetryMessageSuccess'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `eventName` set to `"SetMinDstGas"`.
 */
export function useNonblockingLzAppSetMinDstGasEvent(
  config: Omit<
    UseContractEventConfig<typeof nonblockingLzAppABI, 'SetMinDstGas'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: nonblockingLzAppABI,
    eventName: 'SetMinDstGas',
    ...config,
  } as UseContractEventConfig<typeof nonblockingLzAppABI, 'SetMinDstGas'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `eventName` set to `"SetPrecrime"`.
 */
export function useNonblockingLzAppSetPrecrimeEvent(
  config: Omit<
    UseContractEventConfig<typeof nonblockingLzAppABI, 'SetPrecrime'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: nonblockingLzAppABI,
    eventName: 'SetPrecrime',
    ...config,
  } as UseContractEventConfig<typeof nonblockingLzAppABI, 'SetPrecrime'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `eventName` set to `"SetTrustedRemote"`.
 */
export function useNonblockingLzAppSetTrustedRemoteEvent(
  config: Omit<
    UseContractEventConfig<typeof nonblockingLzAppABI, 'SetTrustedRemote'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: nonblockingLzAppABI,
    eventName: 'SetTrustedRemote',
    ...config,
  } as UseContractEventConfig<typeof nonblockingLzAppABI, 'SetTrustedRemote'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nonblockingLzAppABI}__ and `eventName` set to `"SetTrustedRemoteAddress"`.
 */
export function useNonblockingLzAppSetTrustedRemoteAddressEvent(
  config: Omit<
    UseContractEventConfig<
      typeof nonblockingLzAppABI,
      'SetTrustedRemoteAddress'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: nonblockingLzAppABI,
    eventName: 'SetTrustedRemoteAddress',
    ...config,
  } as UseContractEventConfig<
    typeof nonblockingLzAppABI,
    'SetTrustedRemoteAddress'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lzAppABI}__.
 */
export function useLzAppRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof lzAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lzAppABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: lzAppABI, ...config } as UseContractReadConfig<
    typeof lzAppABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"DEFAULT_PAYLOAD_SIZE_LIMIT"`.
 */
export function useLzAppDefaultPayloadSizeLimit<
  TFunctionName extends 'DEFAULT_PAYLOAD_SIZE_LIMIT',
  TSelectData = ReadContractResult<typeof lzAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lzAppABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lzAppABI,
    functionName: 'DEFAULT_PAYLOAD_SIZE_LIMIT',
    ...config,
  } as UseContractReadConfig<typeof lzAppABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"getConfig"`.
 */
export function useLzAppGetConfig<
  TFunctionName extends 'getConfig',
  TSelectData = ReadContractResult<typeof lzAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lzAppABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lzAppABI,
    functionName: 'getConfig',
    ...config,
  } as UseContractReadConfig<typeof lzAppABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"getTrustedRemoteAddress"`.
 */
export function useLzAppGetTrustedRemoteAddress<
  TFunctionName extends 'getTrustedRemoteAddress',
  TSelectData = ReadContractResult<typeof lzAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lzAppABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lzAppABI,
    functionName: 'getTrustedRemoteAddress',
    ...config,
  } as UseContractReadConfig<typeof lzAppABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"isTrustedRemote"`.
 */
export function useLzAppIsTrustedRemote<
  TFunctionName extends 'isTrustedRemote',
  TSelectData = ReadContractResult<typeof lzAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lzAppABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lzAppABI,
    functionName: 'isTrustedRemote',
    ...config,
  } as UseContractReadConfig<typeof lzAppABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"lzEndpoint"`.
 */
export function useLzAppLzEndpoint<
  TFunctionName extends 'lzEndpoint',
  TSelectData = ReadContractResult<typeof lzAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lzAppABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lzAppABI,
    functionName: 'lzEndpoint',
    ...config,
  } as UseContractReadConfig<typeof lzAppABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"minDstGasLookup"`.
 */
export function useLzAppMinDstGasLookup<
  TFunctionName extends 'minDstGasLookup',
  TSelectData = ReadContractResult<typeof lzAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lzAppABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lzAppABI,
    functionName: 'minDstGasLookup',
    ...config,
  } as UseContractReadConfig<typeof lzAppABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"owner"`.
 */
export function useLzAppOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof lzAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lzAppABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lzAppABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof lzAppABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"payloadSizeLimitLookup"`.
 */
export function useLzAppPayloadSizeLimitLookup<
  TFunctionName extends 'payloadSizeLimitLookup',
  TSelectData = ReadContractResult<typeof lzAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lzAppABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lzAppABI,
    functionName: 'payloadSizeLimitLookup',
    ...config,
  } as UseContractReadConfig<typeof lzAppABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"precrime"`.
 */
export function useLzAppPrecrime<
  TFunctionName extends 'precrime',
  TSelectData = ReadContractResult<typeof lzAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lzAppABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lzAppABI,
    functionName: 'precrime',
    ...config,
  } as UseContractReadConfig<typeof lzAppABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"trustedRemoteLookup"`.
 */
export function useLzAppTrustedRemoteLookup<
  TFunctionName extends 'trustedRemoteLookup',
  TSelectData = ReadContractResult<typeof lzAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lzAppABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lzAppABI,
    functionName: 'trustedRemoteLookup',
    ...config,
  } as UseContractReadConfig<typeof lzAppABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lzAppABI}__.
 */
export function useLzAppWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lzAppABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof lzAppABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof lzAppABI, TFunctionName, TMode>({
    abi: lzAppABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"forceResumeReceive"`.
 */
export function useLzAppForceResumeReceive<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof lzAppABI,
          'forceResumeReceive'
        >['request']['abi'],
        'forceResumeReceive',
        TMode
      > & { functionName?: 'forceResumeReceive' }
    : UseContractWriteConfig<typeof lzAppABI, 'forceResumeReceive', TMode> & {
        abi?: never
        functionName?: 'forceResumeReceive'
      } = {} as any,
) {
  return useContractWrite<typeof lzAppABI, 'forceResumeReceive', TMode>({
    abi: lzAppABI,
    functionName: 'forceResumeReceive',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"lzReceive"`.
 */
export function useLzAppLzReceive<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof lzAppABI,
          'lzReceive'
        >['request']['abi'],
        'lzReceive',
        TMode
      > & { functionName?: 'lzReceive' }
    : UseContractWriteConfig<typeof lzAppABI, 'lzReceive', TMode> & {
        abi?: never
        functionName?: 'lzReceive'
      } = {} as any,
) {
  return useContractWrite<typeof lzAppABI, 'lzReceive', TMode>({
    abi: lzAppABI,
    functionName: 'lzReceive',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useLzAppRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof lzAppABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof lzAppABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof lzAppABI, 'renounceOwnership', TMode>({
    abi: lzAppABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"setConfig"`.
 */
export function useLzAppSetConfig<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof lzAppABI,
          'setConfig'
        >['request']['abi'],
        'setConfig',
        TMode
      > & { functionName?: 'setConfig' }
    : UseContractWriteConfig<typeof lzAppABI, 'setConfig', TMode> & {
        abi?: never
        functionName?: 'setConfig'
      } = {} as any,
) {
  return useContractWrite<typeof lzAppABI, 'setConfig', TMode>({
    abi: lzAppABI,
    functionName: 'setConfig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"setMinDstGas"`.
 */
export function useLzAppSetMinDstGas<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof lzAppABI,
          'setMinDstGas'
        >['request']['abi'],
        'setMinDstGas',
        TMode
      > & { functionName?: 'setMinDstGas' }
    : UseContractWriteConfig<typeof lzAppABI, 'setMinDstGas', TMode> & {
        abi?: never
        functionName?: 'setMinDstGas'
      } = {} as any,
) {
  return useContractWrite<typeof lzAppABI, 'setMinDstGas', TMode>({
    abi: lzAppABI,
    functionName: 'setMinDstGas',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"setPayloadSizeLimit"`.
 */
export function useLzAppSetPayloadSizeLimit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof lzAppABI,
          'setPayloadSizeLimit'
        >['request']['abi'],
        'setPayloadSizeLimit',
        TMode
      > & { functionName?: 'setPayloadSizeLimit' }
    : UseContractWriteConfig<typeof lzAppABI, 'setPayloadSizeLimit', TMode> & {
        abi?: never
        functionName?: 'setPayloadSizeLimit'
      } = {} as any,
) {
  return useContractWrite<typeof lzAppABI, 'setPayloadSizeLimit', TMode>({
    abi: lzAppABI,
    functionName: 'setPayloadSizeLimit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"setPrecrime"`.
 */
export function useLzAppSetPrecrime<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof lzAppABI,
          'setPrecrime'
        >['request']['abi'],
        'setPrecrime',
        TMode
      > & { functionName?: 'setPrecrime' }
    : UseContractWriteConfig<typeof lzAppABI, 'setPrecrime', TMode> & {
        abi?: never
        functionName?: 'setPrecrime'
      } = {} as any,
) {
  return useContractWrite<typeof lzAppABI, 'setPrecrime', TMode>({
    abi: lzAppABI,
    functionName: 'setPrecrime',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"setReceiveVersion"`.
 */
export function useLzAppSetReceiveVersion<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof lzAppABI,
          'setReceiveVersion'
        >['request']['abi'],
        'setReceiveVersion',
        TMode
      > & { functionName?: 'setReceiveVersion' }
    : UseContractWriteConfig<typeof lzAppABI, 'setReceiveVersion', TMode> & {
        abi?: never
        functionName?: 'setReceiveVersion'
      } = {} as any,
) {
  return useContractWrite<typeof lzAppABI, 'setReceiveVersion', TMode>({
    abi: lzAppABI,
    functionName: 'setReceiveVersion',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"setSendVersion"`.
 */
export function useLzAppSetSendVersion<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof lzAppABI,
          'setSendVersion'
        >['request']['abi'],
        'setSendVersion',
        TMode
      > & { functionName?: 'setSendVersion' }
    : UseContractWriteConfig<typeof lzAppABI, 'setSendVersion', TMode> & {
        abi?: never
        functionName?: 'setSendVersion'
      } = {} as any,
) {
  return useContractWrite<typeof lzAppABI, 'setSendVersion', TMode>({
    abi: lzAppABI,
    functionName: 'setSendVersion',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"setTrustedRemote"`.
 */
export function useLzAppSetTrustedRemote<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof lzAppABI,
          'setTrustedRemote'
        >['request']['abi'],
        'setTrustedRemote',
        TMode
      > & { functionName?: 'setTrustedRemote' }
    : UseContractWriteConfig<typeof lzAppABI, 'setTrustedRemote', TMode> & {
        abi?: never
        functionName?: 'setTrustedRemote'
      } = {} as any,
) {
  return useContractWrite<typeof lzAppABI, 'setTrustedRemote', TMode>({
    abi: lzAppABI,
    functionName: 'setTrustedRemote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"setTrustedRemoteAddress"`.
 */
export function useLzAppSetTrustedRemoteAddress<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof lzAppABI,
          'setTrustedRemoteAddress'
        >['request']['abi'],
        'setTrustedRemoteAddress',
        TMode
      > & { functionName?: 'setTrustedRemoteAddress' }
    : UseContractWriteConfig<
        typeof lzAppABI,
        'setTrustedRemoteAddress',
        TMode
      > & {
        abi?: never
        functionName?: 'setTrustedRemoteAddress'
      } = {} as any,
) {
  return useContractWrite<typeof lzAppABI, 'setTrustedRemoteAddress', TMode>({
    abi: lzAppABI,
    functionName: 'setTrustedRemoteAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useLzAppTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof lzAppABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof lzAppABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof lzAppABI, 'transferOwnership', TMode>({
    abi: lzAppABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lzAppABI}__.
 */
export function usePrepareLzAppWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lzAppABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lzAppABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof lzAppABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"forceResumeReceive"`.
 */
export function usePrepareLzAppForceResumeReceive(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lzAppABI, 'forceResumeReceive'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lzAppABI,
    functionName: 'forceResumeReceive',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lzAppABI, 'forceResumeReceive'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"lzReceive"`.
 */
export function usePrepareLzAppLzReceive(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lzAppABI, 'lzReceive'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lzAppABI,
    functionName: 'lzReceive',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lzAppABI, 'lzReceive'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareLzAppRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lzAppABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lzAppABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lzAppABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"setConfig"`.
 */
export function usePrepareLzAppSetConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lzAppABI, 'setConfig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lzAppABI,
    functionName: 'setConfig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lzAppABI, 'setConfig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"setMinDstGas"`.
 */
export function usePrepareLzAppSetMinDstGas(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lzAppABI, 'setMinDstGas'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lzAppABI,
    functionName: 'setMinDstGas',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lzAppABI, 'setMinDstGas'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"setPayloadSizeLimit"`.
 */
export function usePrepareLzAppSetPayloadSizeLimit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lzAppABI, 'setPayloadSizeLimit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lzAppABI,
    functionName: 'setPayloadSizeLimit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lzAppABI, 'setPayloadSizeLimit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"setPrecrime"`.
 */
export function usePrepareLzAppSetPrecrime(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lzAppABI, 'setPrecrime'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lzAppABI,
    functionName: 'setPrecrime',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lzAppABI, 'setPrecrime'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"setReceiveVersion"`.
 */
export function usePrepareLzAppSetReceiveVersion(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lzAppABI, 'setReceiveVersion'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lzAppABI,
    functionName: 'setReceiveVersion',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lzAppABI, 'setReceiveVersion'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"setSendVersion"`.
 */
export function usePrepareLzAppSetSendVersion(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lzAppABI, 'setSendVersion'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lzAppABI,
    functionName: 'setSendVersion',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lzAppABI, 'setSendVersion'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"setTrustedRemote"`.
 */
export function usePrepareLzAppSetTrustedRemote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lzAppABI, 'setTrustedRemote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lzAppABI,
    functionName: 'setTrustedRemote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lzAppABI, 'setTrustedRemote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"setTrustedRemoteAddress"`.
 */
export function usePrepareLzAppSetTrustedRemoteAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lzAppABI, 'setTrustedRemoteAddress'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lzAppABI,
    functionName: 'setTrustedRemoteAddress',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof lzAppABI,
    'setTrustedRemoteAddress'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lzAppABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareLzAppTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lzAppABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lzAppABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lzAppABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lzAppABI}__.
 */
export function useLzAppEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof lzAppABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: lzAppABI,
    ...config,
  } as UseContractEventConfig<typeof lzAppABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lzAppABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useLzAppOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof lzAppABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lzAppABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof lzAppABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lzAppABI}__ and `eventName` set to `"SetMinDstGas"`.
 */
export function useLzAppSetMinDstGasEvent(
  config: Omit<
    UseContractEventConfig<typeof lzAppABI, 'SetMinDstGas'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lzAppABI,
    eventName: 'SetMinDstGas',
    ...config,
  } as UseContractEventConfig<typeof lzAppABI, 'SetMinDstGas'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lzAppABI}__ and `eventName` set to `"SetPrecrime"`.
 */
export function useLzAppSetPrecrimeEvent(
  config: Omit<
    UseContractEventConfig<typeof lzAppABI, 'SetPrecrime'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lzAppABI,
    eventName: 'SetPrecrime',
    ...config,
  } as UseContractEventConfig<typeof lzAppABI, 'SetPrecrime'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lzAppABI}__ and `eventName` set to `"SetTrustedRemote"`.
 */
export function useLzAppSetTrustedRemoteEvent(
  config: Omit<
    UseContractEventConfig<typeof lzAppABI, 'SetTrustedRemote'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lzAppABI,
    eventName: 'SetTrustedRemote',
    ...config,
  } as UseContractEventConfig<typeof lzAppABI, 'SetTrustedRemote'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lzAppABI}__ and `eventName` set to `"SetTrustedRemoteAddress"`.
 */
export function useLzAppSetTrustedRemoteAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof lzAppABI, 'SetTrustedRemoteAddress'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lzAppABI,
    eventName: 'SetTrustedRemoteAddress',
    ...config,
  } as UseContractEventConfig<typeof lzAppABI, 'SetTrustedRemoteAddress'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniMessageABI}__.
 */
export function useOmniMessageRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof omniMessageABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: omniMessageABI,
    ...config,
  } as UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"DEFAULT_PAYLOAD_SIZE_LIMIT"`.
 */
export function useOmniMessageDefaultPayloadSizeLimit<
  TFunctionName extends 'DEFAULT_PAYLOAD_SIZE_LIMIT',
  TSelectData = ReadContractResult<typeof omniMessageABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: omniMessageABI,
    functionName: 'DEFAULT_PAYLOAD_SIZE_LIMIT',
    ...config,
  } as UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"data"`.
 */
export function useOmniMessageData<
  TFunctionName extends 'data',
  TSelectData = ReadContractResult<typeof omniMessageABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: omniMessageABI,
    functionName: 'data',
    ...config,
  } as UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"estimateFees"`.
 */
export function useOmniMessageEstimateFees<
  TFunctionName extends 'estimateFees',
  TSelectData = ReadContractResult<typeof omniMessageABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: omniMessageABI,
    functionName: 'estimateFees',
    ...config,
  } as UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"failedMessages"`.
 */
export function useOmniMessageFailedMessages<
  TFunctionName extends 'failedMessages',
  TSelectData = ReadContractResult<typeof omniMessageABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: omniMessageABI,
    functionName: 'failedMessages',
    ...config,
  } as UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"getConfig"`.
 */
export function useOmniMessageGetConfig<
  TFunctionName extends 'getConfig',
  TSelectData = ReadContractResult<typeof omniMessageABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: omniMessageABI,
    functionName: 'getConfig',
    ...config,
  } as UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"getTrustedRemoteAddress"`.
 */
export function useOmniMessageGetTrustedRemoteAddress<
  TFunctionName extends 'getTrustedRemoteAddress',
  TSelectData = ReadContractResult<typeof omniMessageABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: omniMessageABI,
    functionName: 'getTrustedRemoteAddress',
    ...config,
  } as UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"isTrustedRemote"`.
 */
export function useOmniMessageIsTrustedRemote<
  TFunctionName extends 'isTrustedRemote',
  TSelectData = ReadContractResult<typeof omniMessageABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: omniMessageABI,
    functionName: 'isTrustedRemote',
    ...config,
  } as UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"lzEndpoint"`.
 */
export function useOmniMessageLzEndpoint<
  TFunctionName extends 'lzEndpoint',
  TSelectData = ReadContractResult<typeof omniMessageABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: omniMessageABI,
    functionName: 'lzEndpoint',
    ...config,
  } as UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"minDstGasLookup"`.
 */
export function useOmniMessageMinDstGasLookup<
  TFunctionName extends 'minDstGasLookup',
  TSelectData = ReadContractResult<typeof omniMessageABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: omniMessageABI,
    functionName: 'minDstGasLookup',
    ...config,
  } as UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"owner"`.
 */
export function useOmniMessageOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof omniMessageABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: omniMessageABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"payloadSizeLimitLookup"`.
 */
export function useOmniMessagePayloadSizeLimitLookup<
  TFunctionName extends 'payloadSizeLimitLookup',
  TSelectData = ReadContractResult<typeof omniMessageABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: omniMessageABI,
    functionName: 'payloadSizeLimitLookup',
    ...config,
  } as UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"poolFee"`.
 */
export function useOmniMessagePoolFee<
  TFunctionName extends 'poolFee',
  TSelectData = ReadContractResult<typeof omniMessageABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: omniMessageABI,
    functionName: 'poolFee',
    ...config,
  } as UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"pp"`.
 */
export function useOmniMessagePp<
  TFunctionName extends 'pp',
  TSelectData = ReadContractResult<typeof omniMessageABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: omniMessageABI,
    functionName: 'pp',
    ...config,
  } as UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"precrime"`.
 */
export function useOmniMessagePrecrime<
  TFunctionName extends 'precrime',
  TSelectData = ReadContractResult<typeof omniMessageABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: omniMessageABI,
    functionName: 'precrime',
    ...config,
  } as UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"role"`.
 */
export function useOmniMessageRole<
  TFunctionName extends 'role',
  TSelectData = ReadContractResult<typeof omniMessageABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: omniMessageABI,
    functionName: 'role',
    ...config,
  } as UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"trustedRemoteLookup"`.
 */
export function useOmniMessageTrustedRemoteLookup<
  TFunctionName extends 'trustedRemoteLookup',
  TSelectData = ReadContractResult<typeof omniMessageABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: omniMessageABI,
    functionName: 'trustedRemoteLookup',
    ...config,
  } as UseContractReadConfig<typeof omniMessageABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniMessageABI}__.
 */
export function useOmniMessageWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof omniMessageABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof omniMessageABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof omniMessageABI, TFunctionName, TMode>({
    abi: omniMessageABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"forceResumeReceive"`.
 */
export function useOmniMessageForceResumeReceive<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof omniMessageABI,
          'forceResumeReceive'
        >['request']['abi'],
        'forceResumeReceive',
        TMode
      > & { functionName?: 'forceResumeReceive' }
    : UseContractWriteConfig<
        typeof omniMessageABI,
        'forceResumeReceive',
        TMode
      > & {
        abi?: never
        functionName?: 'forceResumeReceive'
      } = {} as any,
) {
  return useContractWrite<typeof omniMessageABI, 'forceResumeReceive', TMode>({
    abi: omniMessageABI,
    functionName: 'forceResumeReceive',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"lzReceive"`.
 */
export function useOmniMessageLzReceive<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof omniMessageABI,
          'lzReceive'
        >['request']['abi'],
        'lzReceive',
        TMode
      > & { functionName?: 'lzReceive' }
    : UseContractWriteConfig<typeof omniMessageABI, 'lzReceive', TMode> & {
        abi?: never
        functionName?: 'lzReceive'
      } = {} as any,
) {
  return useContractWrite<typeof omniMessageABI, 'lzReceive', TMode>({
    abi: omniMessageABI,
    functionName: 'lzReceive',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"nonblockingLzReceive"`.
 */
export function useOmniMessageNonblockingLzReceive<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof omniMessageABI,
          'nonblockingLzReceive'
        >['request']['abi'],
        'nonblockingLzReceive',
        TMode
      > & { functionName?: 'nonblockingLzReceive' }
    : UseContractWriteConfig<
        typeof omniMessageABI,
        'nonblockingLzReceive',
        TMode
      > & {
        abi?: never
        functionName?: 'nonblockingLzReceive'
      } = {} as any,
) {
  return useContractWrite<typeof omniMessageABI, 'nonblockingLzReceive', TMode>(
    {
      abi: omniMessageABI,
      functionName: 'nonblockingLzReceive',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOmniMessageRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof omniMessageABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof omniMessageABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof omniMessageABI, 'renounceOwnership', TMode>({
    abi: omniMessageABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"retryMessage"`.
 */
export function useOmniMessageRetryMessage<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof omniMessageABI,
          'retryMessage'
        >['request']['abi'],
        'retryMessage',
        TMode
      > & { functionName?: 'retryMessage' }
    : UseContractWriteConfig<typeof omniMessageABI, 'retryMessage', TMode> & {
        abi?: never
        functionName?: 'retryMessage'
      } = {} as any,
) {
  return useContractWrite<typeof omniMessageABI, 'retryMessage', TMode>({
    abi: omniMessageABI,
    functionName: 'retryMessage',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"send"`.
 */
export function useOmniMessageSend<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof omniMessageABI,
          'send'
        >['request']['abi'],
        'send',
        TMode
      > & { functionName?: 'send' }
    : UseContractWriteConfig<typeof omniMessageABI, 'send', TMode> & {
        abi?: never
        functionName?: 'send'
      } = {} as any,
) {
  return useContractWrite<typeof omniMessageABI, 'send', TMode>({
    abi: omniMessageABI,
    functionName: 'send',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"setConfig"`.
 */
export function useOmniMessageSetConfig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof omniMessageABI,
          'setConfig'
        >['request']['abi'],
        'setConfig',
        TMode
      > & { functionName?: 'setConfig' }
    : UseContractWriteConfig<typeof omniMessageABI, 'setConfig', TMode> & {
        abi?: never
        functionName?: 'setConfig'
      } = {} as any,
) {
  return useContractWrite<typeof omniMessageABI, 'setConfig', TMode>({
    abi: omniMessageABI,
    functionName: 'setConfig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"setMinDstGas"`.
 */
export function useOmniMessageSetMinDstGas<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof omniMessageABI,
          'setMinDstGas'
        >['request']['abi'],
        'setMinDstGas',
        TMode
      > & { functionName?: 'setMinDstGas' }
    : UseContractWriteConfig<typeof omniMessageABI, 'setMinDstGas', TMode> & {
        abi?: never
        functionName?: 'setMinDstGas'
      } = {} as any,
) {
  return useContractWrite<typeof omniMessageABI, 'setMinDstGas', TMode>({
    abi: omniMessageABI,
    functionName: 'setMinDstGas',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"setPayloadSizeLimit"`.
 */
export function useOmniMessageSetPayloadSizeLimit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof omniMessageABI,
          'setPayloadSizeLimit'
        >['request']['abi'],
        'setPayloadSizeLimit',
        TMode
      > & { functionName?: 'setPayloadSizeLimit' }
    : UseContractWriteConfig<
        typeof omniMessageABI,
        'setPayloadSizeLimit',
        TMode
      > & {
        abi?: never
        functionName?: 'setPayloadSizeLimit'
      } = {} as any,
) {
  return useContractWrite<typeof omniMessageABI, 'setPayloadSizeLimit', TMode>({
    abi: omniMessageABI,
    functionName: 'setPayloadSizeLimit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"setPrecrime"`.
 */
export function useOmniMessageSetPrecrime<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof omniMessageABI,
          'setPrecrime'
        >['request']['abi'],
        'setPrecrime',
        TMode
      > & { functionName?: 'setPrecrime' }
    : UseContractWriteConfig<typeof omniMessageABI, 'setPrecrime', TMode> & {
        abi?: never
        functionName?: 'setPrecrime'
      } = {} as any,
) {
  return useContractWrite<typeof omniMessageABI, 'setPrecrime', TMode>({
    abi: omniMessageABI,
    functionName: 'setPrecrime',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"setReceiveVersion"`.
 */
export function useOmniMessageSetReceiveVersion<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof omniMessageABI,
          'setReceiveVersion'
        >['request']['abi'],
        'setReceiveVersion',
        TMode
      > & { functionName?: 'setReceiveVersion' }
    : UseContractWriteConfig<
        typeof omniMessageABI,
        'setReceiveVersion',
        TMode
      > & {
        abi?: never
        functionName?: 'setReceiveVersion'
      } = {} as any,
) {
  return useContractWrite<typeof omniMessageABI, 'setReceiveVersion', TMode>({
    abi: omniMessageABI,
    functionName: 'setReceiveVersion',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"setSendVersion"`.
 */
export function useOmniMessageSetSendVersion<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof omniMessageABI,
          'setSendVersion'
        >['request']['abi'],
        'setSendVersion',
        TMode
      > & { functionName?: 'setSendVersion' }
    : UseContractWriteConfig<typeof omniMessageABI, 'setSendVersion', TMode> & {
        abi?: never
        functionName?: 'setSendVersion'
      } = {} as any,
) {
  return useContractWrite<typeof omniMessageABI, 'setSendVersion', TMode>({
    abi: omniMessageABI,
    functionName: 'setSendVersion',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"setTrustedRemote"`.
 */
export function useOmniMessageSetTrustedRemote<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof omniMessageABI,
          'setTrustedRemote'
        >['request']['abi'],
        'setTrustedRemote',
        TMode
      > & { functionName?: 'setTrustedRemote' }
    : UseContractWriteConfig<
        typeof omniMessageABI,
        'setTrustedRemote',
        TMode
      > & {
        abi?: never
        functionName?: 'setTrustedRemote'
      } = {} as any,
) {
  return useContractWrite<typeof omniMessageABI, 'setTrustedRemote', TMode>({
    abi: omniMessageABI,
    functionName: 'setTrustedRemote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"setTrustedRemoteAddress"`.
 */
export function useOmniMessageSetTrustedRemoteAddress<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof omniMessageABI,
          'setTrustedRemoteAddress'
        >['request']['abi'],
        'setTrustedRemoteAddress',
        TMode
      > & { functionName?: 'setTrustedRemoteAddress' }
    : UseContractWriteConfig<
        typeof omniMessageABI,
        'setTrustedRemoteAddress',
        TMode
      > & {
        abi?: never
        functionName?: 'setTrustedRemoteAddress'
      } = {} as any,
) {
  return useContractWrite<
    typeof omniMessageABI,
    'setTrustedRemoteAddress',
    TMode
  >({
    abi: omniMessageABI,
    functionName: 'setTrustedRemoteAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOmniMessageTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof omniMessageABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof omniMessageABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof omniMessageABI, 'transferOwnership', TMode>({
    abi: omniMessageABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"trustAddress"`.
 */
export function useOmniMessageTrustAddress<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof omniMessageABI,
          'trustAddress'
        >['request']['abi'],
        'trustAddress',
        TMode
      > & { functionName?: 'trustAddress' }
    : UseContractWriteConfig<typeof omniMessageABI, 'trustAddress', TMode> & {
        abi?: never
        functionName?: 'trustAddress'
      } = {} as any,
) {
  return useContractWrite<typeof omniMessageABI, 'trustAddress', TMode>({
    abi: omniMessageABI,
    functionName: 'trustAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniMessageABI}__.
 */
export function usePrepareOmniMessageWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof omniMessageABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: omniMessageABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof omniMessageABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"forceResumeReceive"`.
 */
export function usePrepareOmniMessageForceResumeReceive(
  config: Omit<
    UsePrepareContractWriteConfig<typeof omniMessageABI, 'forceResumeReceive'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: omniMessageABI,
    functionName: 'forceResumeReceive',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof omniMessageABI,
    'forceResumeReceive'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"lzReceive"`.
 */
export function usePrepareOmniMessageLzReceive(
  config: Omit<
    UsePrepareContractWriteConfig<typeof omniMessageABI, 'lzReceive'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: omniMessageABI,
    functionName: 'lzReceive',
    ...config,
  } as UsePrepareContractWriteConfig<typeof omniMessageABI, 'lzReceive'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"nonblockingLzReceive"`.
 */
export function usePrepareOmniMessageNonblockingLzReceive(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof omniMessageABI,
      'nonblockingLzReceive'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: omniMessageABI,
    functionName: 'nonblockingLzReceive',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof omniMessageABI,
    'nonblockingLzReceive'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOmniMessageRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof omniMessageABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: omniMessageABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof omniMessageABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"retryMessage"`.
 */
export function usePrepareOmniMessageRetryMessage(
  config: Omit<
    UsePrepareContractWriteConfig<typeof omniMessageABI, 'retryMessage'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: omniMessageABI,
    functionName: 'retryMessage',
    ...config,
  } as UsePrepareContractWriteConfig<typeof omniMessageABI, 'retryMessage'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"send"`.
 */
export function usePrepareOmniMessageSend(
  config: Omit<
    UsePrepareContractWriteConfig<typeof omniMessageABI, 'send'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: omniMessageABI,
    functionName: 'send',
    ...config,
  } as UsePrepareContractWriteConfig<typeof omniMessageABI, 'send'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"setConfig"`.
 */
export function usePrepareOmniMessageSetConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof omniMessageABI, 'setConfig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: omniMessageABI,
    functionName: 'setConfig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof omniMessageABI, 'setConfig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"setMinDstGas"`.
 */
export function usePrepareOmniMessageSetMinDstGas(
  config: Omit<
    UsePrepareContractWriteConfig<typeof omniMessageABI, 'setMinDstGas'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: omniMessageABI,
    functionName: 'setMinDstGas',
    ...config,
  } as UsePrepareContractWriteConfig<typeof omniMessageABI, 'setMinDstGas'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"setPayloadSizeLimit"`.
 */
export function usePrepareOmniMessageSetPayloadSizeLimit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof omniMessageABI, 'setPayloadSizeLimit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: omniMessageABI,
    functionName: 'setPayloadSizeLimit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof omniMessageABI,
    'setPayloadSizeLimit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"setPrecrime"`.
 */
export function usePrepareOmniMessageSetPrecrime(
  config: Omit<
    UsePrepareContractWriteConfig<typeof omniMessageABI, 'setPrecrime'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: omniMessageABI,
    functionName: 'setPrecrime',
    ...config,
  } as UsePrepareContractWriteConfig<typeof omniMessageABI, 'setPrecrime'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"setReceiveVersion"`.
 */
export function usePrepareOmniMessageSetReceiveVersion(
  config: Omit<
    UsePrepareContractWriteConfig<typeof omniMessageABI, 'setReceiveVersion'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: omniMessageABI,
    functionName: 'setReceiveVersion',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof omniMessageABI,
    'setReceiveVersion'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"setSendVersion"`.
 */
export function usePrepareOmniMessageSetSendVersion(
  config: Omit<
    UsePrepareContractWriteConfig<typeof omniMessageABI, 'setSendVersion'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: omniMessageABI,
    functionName: 'setSendVersion',
    ...config,
  } as UsePrepareContractWriteConfig<typeof omniMessageABI, 'setSendVersion'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"setTrustedRemote"`.
 */
export function usePrepareOmniMessageSetTrustedRemote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof omniMessageABI, 'setTrustedRemote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: omniMessageABI,
    functionName: 'setTrustedRemote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof omniMessageABI, 'setTrustedRemote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"setTrustedRemoteAddress"`.
 */
export function usePrepareOmniMessageSetTrustedRemoteAddress(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof omniMessageABI,
      'setTrustedRemoteAddress'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: omniMessageABI,
    functionName: 'setTrustedRemoteAddress',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof omniMessageABI,
    'setTrustedRemoteAddress'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOmniMessageTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof omniMessageABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: omniMessageABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof omniMessageABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link omniMessageABI}__ and `functionName` set to `"trustAddress"`.
 */
export function usePrepareOmniMessageTrustAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof omniMessageABI, 'trustAddress'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: omniMessageABI,
    functionName: 'trustAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof omniMessageABI, 'trustAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link omniMessageABI}__.
 */
export function useOmniMessageEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof omniMessageABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: omniMessageABI,
    ...config,
  } as UseContractEventConfig<typeof omniMessageABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link omniMessageABI}__ and `eventName` set to `"MessageFailed"`.
 */
export function useOmniMessageMessageFailedEvent(
  config: Omit<
    UseContractEventConfig<typeof omniMessageABI, 'MessageFailed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: omniMessageABI,
    eventName: 'MessageFailed',
    ...config,
  } as UseContractEventConfig<typeof omniMessageABI, 'MessageFailed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link omniMessageABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOmniMessageOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof omniMessageABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: omniMessageABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof omniMessageABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link omniMessageABI}__ and `eventName` set to `"RetryMessageSuccess"`.
 */
export function useOmniMessageRetryMessageSuccessEvent(
  config: Omit<
    UseContractEventConfig<typeof omniMessageABI, 'RetryMessageSuccess'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: omniMessageABI,
    eventName: 'RetryMessageSuccess',
    ...config,
  } as UseContractEventConfig<typeof omniMessageABI, 'RetryMessageSuccess'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link omniMessageABI}__ and `eventName` set to `"SetMinDstGas"`.
 */
export function useOmniMessageSetMinDstGasEvent(
  config: Omit<
    UseContractEventConfig<typeof omniMessageABI, 'SetMinDstGas'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: omniMessageABI,
    eventName: 'SetMinDstGas',
    ...config,
  } as UseContractEventConfig<typeof omniMessageABI, 'SetMinDstGas'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link omniMessageABI}__ and `eventName` set to `"SetPrecrime"`.
 */
export function useOmniMessageSetPrecrimeEvent(
  config: Omit<
    UseContractEventConfig<typeof omniMessageABI, 'SetPrecrime'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: omniMessageABI,
    eventName: 'SetPrecrime',
    ...config,
  } as UseContractEventConfig<typeof omniMessageABI, 'SetPrecrime'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link omniMessageABI}__ and `eventName` set to `"SetTrustedRemote"`.
 */
export function useOmniMessageSetTrustedRemoteEvent(
  config: Omit<
    UseContractEventConfig<typeof omniMessageABI, 'SetTrustedRemote'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: omniMessageABI,
    eventName: 'SetTrustedRemote',
    ...config,
  } as UseContractEventConfig<typeof omniMessageABI, 'SetTrustedRemote'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link omniMessageABI}__ and `eventName` set to `"SetTrustedRemoteAddress"`.
 */
export function useOmniMessageSetTrustedRemoteAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof omniMessageABI, 'SetTrustedRemoteAddress'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: omniMessageABI,
    eventName: 'SetTrustedRemoteAddress',
    ...config,
  } as UseContractEventConfig<typeof omniMessageABI, 'SetTrustedRemoteAddress'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ownableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ownableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, TFunctionName, TMode>({
    abi: ownableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof ownableABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, 'renounceOwnership', TMode>({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof ownableABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, 'transferOwnership', TMode>({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    ...config,
  } as UseContractEventConfig<typeof ownableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semverABI}__.
 */
export function useSemverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof semverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof semverABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: semverABI, ...config } as UseContractReadConfig<
    typeof semverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semverABI}__ and `functionName` set to `"version"`.
 */
export function useSemverVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<typeof semverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof semverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semverABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<typeof semverABI, TFunctionName, TSelectData>)
}
